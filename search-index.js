var searchIndex = {};
searchIndex['bytes'] = {"items":[[0,"","bytes","",null,null],[3,"ByteBuf","","A `Buf` backed by a contiguous region of memory.",null,null],[3,"ROByteBuf","","Same as `ByteBuf` but cannot be flipped to a `MutByteBuf`.",null,null],[3,"MutByteBuf","","",null,null],[3,"SeqByteStr","","",null,null],[3,"SmallByteStr","","",null,null],[3,"SmallByteStrBuf","","",null,null],[3,"Bytes","","A specialized `ByteStr` box.",null,null],[3,"RingBuf","","Buf backed by a continous chunk of memory. Maintains a read cursor and a\nwrite cursor. When reads and writes reach the end of the allocated buffer,\nwraps around to the start.",null,null],[3,"Rope","","An immutable sequence of bytes formed by concatenation of other `ByteStr`\nvalues, without copying the data in the pieces. The concatenation is\nrepresented as a tree whose leaf nodes are each a `Bytes` value.",null,null],[3,"RopeBuf","","",null,null],[3,"SliceBuf","","",null,null],[3,"MutSliceBuf","","",null,null],[4,"BufError","","",null,null],[13,"Underflow","","",0,null],[13,"Overflow","","",0,null],[11,"from_slice","","Create a new `ByteBuf` by copying the contents of the given slice.",1,null],[11,"mut_with_capacity","","",1,{"inputs":[{"name":"bytebuf"},{"name":"usize"}],"output":{"name":"mutbytebuf"}}],[11,"none","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"bytebuf"}}],[11,"from_mem_ref","","",1,{"inputs":[{"name":"bytebuf"},{"name":"memref"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bytebuf"}}],[11,"capacity","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"usize"}}],[11,"flip","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"mutbytebuf"}}],[11,"read_slice","","",1,null],[11,"to_seq_byte_str","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"seqbytestr"}}],[11,"to_bytes","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"bytes"}}],[11,"remaining","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",1,null],[11,"advance","","",1,{"inputs":[{"name":"bytebuf"},{"name":"usize"}],"output":null}],[11,"read_slice","","",1,null],[11,"from_mem_ref","","",2,{"inputs":[{"name":"robytebuf"},{"name":"memref"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"robytebuf"}}],[11,"to_seq_byte_str","","",2,{"inputs":[{"name":"robytebuf"}],"output":{"name":"seqbytestr"}}],[11,"to_bytes","","",2,{"inputs":[{"name":"robytebuf"}],"output":{"name":"bytes"}}],[11,"remaining","","",2,{"inputs":[{"name":"robytebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",2,null],[11,"advance","","",2,{"inputs":[{"name":"robytebuf"},{"name":"usize"}],"output":null}],[11,"read_slice","","",2,null],[11,"capacity","","",3,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"usize"}}],[11,"flip","","",3,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"bytebuf"}}],[11,"clear","","",3,{"inputs":[{"name":"mutbytebuf"}],"output":null}],[11,"write_slice","","",3,null],[11,"remaining","","",3,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"usize"}}],[11,"advance","","",3,{"inputs":[{"name":"mutbytebuf"},{"name":"usize"}],"output":null}],[11,"mut_bytes","","",3,null],[11,"from_slice","","Create a new `SeqByteStr` from a byte slice.",4,null],[11,"from_mem_ref","","Creates a new `SeqByteStr` from a `MemRef`, an offset, and a length.",4,{"inputs":[{"name":"seqbytestr"},{"name":"memref"},{"name":"u32"},{"name":"u32"}],"output":{"name":"seqbytestr"}}],[11,"buf","","",4,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"robytebuf"}}],[11,"concat","","",4,{"inputs":[{"name":"seqbytestr"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",4,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"usize"}}],[11,"slice","","",4,{"inputs":[{"name":"seqbytestr"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",4,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"bytes"}}],[11,"index","","",4,{"inputs":[{"name":"seqbytestr"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",4,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"seqbytestr"}}],[11,"clone","","",5,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"smallbytestr"}}],[11,"zero","","",5,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"smallbytestr"}}],[11,"from_slice","","",5,null],[11,"as_slice","","",5,null],[11,"buf","","",5,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"smallbytestrbuf"}}],[11,"concat","","",5,{"inputs":[{"name":"smallbytestr"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",5,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"usize"}}],[11,"slice","","",5,{"inputs":[{"name":"smallbytestr"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",5,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"bytes"}}],[11,"index","","",5,{"inputs":[{"name":"smallbytestr"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",6,{"inputs":[{"name":"smallbytestrbuf"}],"output":{"name":"smallbytestrbuf"}}],[11,"remaining","","",6,{"inputs":[{"name":"smallbytestrbuf"}],"output":{"name":"usize"}}],[11,"bytes","","",6,null],[11,"advance","","",6,{"inputs":[{"name":"smallbytestrbuf"},{"name":"usize"}],"output":null}],[11,"from_slice","","",7,null],[11,"of","","",7,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"empty","","",7,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"downcast_ref","","If the underlying `ByteStr` is of type `B`, returns a reference to it\notherwise None.",7,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"try_unwrap","","If the underlying `ByteStr` is of type `B`, returns the unwraped value,\notherwise, returns the original `Bytes` as `Err`.",7,{"inputs":[{"name":"bytes"}],"output":{"name":"result"}}],[11,"buf","","",7,{"inputs":[{"name":"bytes"}],"output":{"name":"box"}}],[11,"concat","","",7,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",7,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"slice","","",7,{"inputs":[{"name":"bytes"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_at","","",7,null],[11,"to_bytes","","",7,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"index","","",7,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"fmt","","",7,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"drop","","",7,{"inputs":[{"name":"bytes"}],"output":null}],[11,"new","","",8,{"inputs":[{"name":"ringbuf"},{"name":"usize"}],"output":{"name":"ringbuf"}}],[11,"is_full","","",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"bool"}}],[11,"is_empty","","",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"bool"}}],[11,"capacity","","",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"ringbuf"}}],[11,"fmt","","",8,{"inputs":[{"name":"ringbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",8,{"inputs":[{"name":"ringbuf"}],"output":null}],[11,"remaining","","",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"usize"}}],[11,"bytes","","",8,null],[11,"advance","","",8,{"inputs":[{"name":"ringbuf"},{"name":"usize"}],"output":null}],[11,"remaining","","",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"usize"}}],[11,"advance","","",8,{"inputs":[{"name":"ringbuf"},{"name":"usize"}],"output":null}],[11,"mut_bytes","","",8,null],[11,"from_slice","","",9,null],[11,"of","","Returns a Rope consisting of the supplied Bytes as a single segment.",9,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"rope"}}],[11,"len","","",9,{"inputs":[{"name":"rope"}],"output":{"name":"usize"}}],[11,"is_empty","","",9,{"inputs":[{"name":"rope"}],"output":{"name":"bool"}}],[11,"buf","","",9,{"inputs":[{"name":"rope"}],"output":{"name":"ropebuf"}}],[11,"concat","","",9,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",9,{"inputs":[{"name":"rope"}],"output":{"name":"usize"}}],[11,"slice","","",9,{"inputs":[{"name":"rope"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",9,{"inputs":[{"name":"rope"}],"output":{"name":"bytes"}}],[11,"index","","",9,{"inputs":[{"name":"rope"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",9,{"inputs":[{"name":"rope"}],"output":{"name":"rope"}}],[11,"remaining","","",10,{"inputs":[{"name":"ropebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",10,null],[11,"advance","","",10,{"inputs":[{"name":"ropebuf"},{"name":"usize"}],"output":null}],[11,"wrap","","",11,null],[11,"remaining","","",11,{"inputs":[{"name":"slicebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",11,null],[11,"advance","","",11,{"inputs":[{"name":"slicebuf"},{"name":"usize"}],"output":null}],[11,"wrap","","",12,null],[11,"remaining","","",12,{"inputs":[{"name":"mutslicebuf"}],"output":{"name":"usize"}}],[11,"advance","","",12,{"inputs":[{"name":"mutslicebuf"},{"name":"usize"}],"output":null}],[11,"mut_bytes","","",12,null],[0,"traits","","All traits are re-exported here to allow glob imports.",null,null],[8,"Buf","","A trait for values that provide sequential read access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be accessed from the Buf",13,{"inputs":[{"name":"buf"}],"output":{"name":"usize"}}],[10,"bytes","","Returns a slice starting at the current Buf position and of length\nbetween 0 and `Buf::remaining()`.",13,null],[10,"advance","","Advance the internal cursor of the Buf",13,{"inputs":[{"name":"buf"},{"name":"usize"}],"output":null}],[11,"has_remaining","","Returns true if there are any more bytes to consume",13,{"inputs":[{"name":"buf"}],"output":{"name":"bool"}}],[11,"read_slice","","Read bytes from the `Buf` into the given slice and advance the cursor by\nthe number of bytes read.",13,null],[11,"read_byte","","Read a single byte from the `Buf`",13,{"inputs":[{"name":"buf"}],"output":{"name":"option"}}],[8,"BufExt","","An extension trait providing extra functions applicable to all `Buf` values.",null,null],[10,"read","","Read bytes from this Buf into the given sink and advance the cursor by\nthe number of bytes read.",14,{"inputs":[{"name":"bufext"},{"name":"s"}],"output":{"name":"result"}}],[8,"MutBuf","","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be accessed from the Buf",15,{"inputs":[{"name":"mutbuf"}],"output":{"name":"usize"}}],[10,"advance","","Advance the internal cursor of the Buf",15,{"inputs":[{"name":"mutbuf"},{"name":"usize"}],"output":null}],[11,"has_remaining","","Returns true if there are any more bytes to consume",15,{"inputs":[{"name":"mutbuf"}],"output":{"name":"bool"}}],[10,"mut_bytes","","Returns a mutable slice starting at the current Buf position and of\nlength between 0 and `Buf::remaining()`.",15,null],[11,"write_slice","","Read bytes from this Buf into the given slice and advance the cursor by\nthe number of bytes read.",15,null],[11,"write_byte","","Write a single byte to the `MuBuf`",15,{"inputs":[{"name":"mutbuf"},{"name":"u8"}],"output":{"name":"bool"}}],[8,"MutBufExt","","An extension trait providing extra functions applicable to all `MutBuf` values.",null,null],[10,"write","","Write bytes from the given source into the current `MutBuf` and advance\nthe cursor by the number of bytes written.",16,{"inputs":[{"name":"mutbufext"},{"name":"s"}],"output":{"name":"result"}}],[8,"ByteStr","","An immutable sequence of bytes. Operations will not mutate the original\nvalue. Since only immutable access is permitted, operations do not require\ncopying (though, sometimes copying will happen as an optimization).",null,null],[16,"Buf","bytes::ByteStr","",null,null],[10,"buf","bytes","Returns a read-only `Buf` for accessing the byte contents of the\n`ByteStr`.",17,{"inputs":[{"name":"bytestr"}],"output":{"name":"buf"}}],[10,"concat","","Returns a new `Bytes` value representing the concatenation of `self`\nwith the given `Bytes`.",17,{"inputs":[{"name":"bytestr"},{"name":"b"}],"output":{"name":"bytes"}}],[10,"len","","Returns the number of bytes in the ByteStr",17,{"inputs":[{"name":"bytestr"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the length of the `ByteStr` is 0",17,{"inputs":[{"name":"bytestr"}],"output":{"name":"bool"}}],[10,"slice","","Returns a new ByteStr value containing the byte range between `begin`\n(inclusive) and `end` (exclusive)",17,{"inputs":[{"name":"bytestr"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_from","","Returns a new ByteStr value containing the byte range starting from\n`begin` (inclusive) to the end of the byte str.",17,{"inputs":[{"name":"bytestr"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_to","","Returns a new ByteStr value containing the byte range from the start up\nto `end` (exclusive).",17,{"inputs":[{"name":"bytestr"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_at","","Divides the value into two `Bytes` at the given index.",17,null],[8,"ToBytes","","",null,null],[10,"to_bytes","","Consumes the value and returns a `Bytes` instance containing\nidentical bytes",18,{"inputs":[{"name":"tobytes"}],"output":{"name":"bytes"}}],[8,"Sink","","A value that reads bytes from a Buf into itself",null,null],[16,"Error","bytes::Sink","",null,null],[10,"sink","bytes","",19,{"inputs":[{"name":"sink"},{"name":"b"}],"output":{"name":"result"}}],[8,"Source","","A value that writes bytes from itself into a `MutBuf`.",null,null],[16,"Error","bytes::Source","",null,null],[10,"fill","bytes","",20,{"inputs":[{"name":"source"},{"name":"b"}],"output":{"name":"result"}}],[6,"Error","","",null,null],[6,"Error","","",null,null],[6,"Error","","",null,null],[6,"Error","","",null,null],[6,"Error","","",null,null],[6,"Error","","",null,null],[6,"Error","","",null,null],[11,"remaining","alloc::boxed","",21,{"inputs":[{"name":"box"}],"output":{"name":"usize"}}],[11,"bytes","","",21,null],[11,"advance","","",21,{"inputs":[{"name":"box"},{"name":"usize"}],"output":null}],[11,"read_slice","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","bytes","",1,null],[11,"read","","",2,null],[11,"read","","",10,null],[11,"read","alloc::boxed","",21,null],[11,"write","bytes","",3,null],[11,"flush","","",3,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"buferror"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"BufError"],[3,"ByteBuf"],[3,"ROByteBuf"],[3,"MutByteBuf"],[3,"SeqByteStr"],[3,"SmallByteStr"],[3,"SmallByteStrBuf"],[3,"Bytes"],[3,"RingBuf"],[3,"Rope"],[3,"RopeBuf"],[3,"SliceBuf"],[3,"MutSliceBuf"],[8,"Buf"],[8,"BufExt"],[8,"MutBuf"],[8,"MutBufExt"],[8,"ByteStr"],[8,"ToBytes"],[8,"Sink"],[8,"Source"],[3,"Box"]]};
initSearch(searchIndex);
